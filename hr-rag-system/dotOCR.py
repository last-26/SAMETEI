#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
DOT-OCR (GOT-OCR2) Komut Satƒ±rƒ± Uygulamasƒ±
Tek dosya halinde √ßalƒ±≈ütƒ±rƒ±labilir OCR uygulamasƒ±

Kullanƒ±m:
    python dotOCR.py <g√∂r√ºnt√º_dosyasƒ±> [--type TYPE] [--output OUTPUT]

√ñrnekler:
    python dotOCR.py temp/1.png
    python dotOCR.py temp/2.PNG --type text_only
    python dotOCR.py temp/1.png --output result.txt
"""

import os
import sys
import json
import torch
import argparse
import logging
import time
from PIL import Image
from transformers import AutoModel, AutoTokenizer

# Logging konfig√ºrasyonu
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class DOTOCR:
    def __init__(self, model_path=None):
        """
        DOT-OCR ba≈ülatƒ±cƒ±

        Args:
            model_path (str): GOT-OCR2 model dizini yolu
        """
        self.model_path = model_path or r"C:\Users\samet\Downloads\GOT-OCR2_0"
        self.model = None
        self.tokenizer = None
        self.is_initialized = False
        self.device = 'cuda' if torch.cuda.is_available() else 'cpu'

        logger.info(f"DOT-OCR ba≈ülatƒ±lƒ±yor. Cihaz: {self.device}")

    def initialize_model(self):
        """GOT-OCR2 modelini y√ºkle ve ba≈ülat"""
        try:
            if not os.path.isdir(self.model_path):
                raise FileNotFoundError(f"Model dizini bulunamadƒ±: {self.model_path}")

            logger.info("Model y√ºkleniyor...")

            # Tokenizer y√ºkleme
            self.tokenizer = AutoTokenizer.from_pretrained(
                self.model_path,
                local_files_only=True,
                trust_remote_code=True
            )

            # Model y√ºkleme
            self.model = AutoModel.from_pretrained(
                self.model_path,
                local_files_only=True,
                trust_remote_code=True,
                torch_dtype=torch.float16 if self.device == 'cuda' else torch.float32,
                device_map=self.device
            ).eval()

            # Generation config ayarlarƒ±
            if hasattr(self.model, 'generation_config') and self.model.generation_config is not None:
                self.model.generation_config.use_cache = False
                self.model.generation_config.max_new_tokens = 200
                self.model.generation_config.temperature = 0.0
                self.model.generation_config.do_sample = False
                self.model.generation_config.repetition_penalty = 1.0

                # Pad/EOS token ayarlarƒ±
                eos_id = self.tokenizer.eos_token_id or self.tokenizer.convert_tokens_to_ids('</s>')
                if self.tokenizer.pad_token_id is None and eos_id is not None:
                    self.tokenizer.pad_token = self.tokenizer.eos_token or '</s>'

                pad_id = self.tokenizer.pad_token_id or eos_id
                if pad_id is not None:
                    self.model.generation_config.pad_token_id = pad_id
                    self.model.generation_config.eos_token_id = eos_id

            # Config ayarlarƒ±
            if hasattr(self.model, 'config') and self.model.config is not None:
                self.model.config.use_cache = False
                if pad_id is not None:
                    self.model.config.pad_token_id = pad_id
                    self.model.config.eos_token_id = eos_id

            self.is_initialized = True
            logger.info("‚úÖ Model ba≈üarƒ±yla y√ºklendi!")
            logger.info(f"üìç Cihaz: {self.device}")
            if self.device == 'cuda':
                logger.info(f"üéÆ GPU: {torch.cuda.get_device_name(0)}")

            return True

        except Exception as e:
            logger.error(f"‚ùå Model y√ºkleme hatasƒ±: {e}")
            return False

    def _resize_image(self, image_path, long_edge_max=1600):
        """G√∂r√ºnt√ºy√º hƒ±z optimizasyonu i√ßin yeniden boyutlandƒ±r"""
        try:
            img = Image.open(image_path).convert('RGB')
            w, h = img.size
            long_edge = max(w, h)

            if long_edge <= long_edge_max:
                return image_path

            scale = long_edge_max / float(long_edge)
            new_w, new_h = max(1, int(w * scale)), max(1, int(h * scale))
            img = img.resize((new_w, new_h))

            # Ge√ßici dosya olu≈ütur
            temp_dir = os.path.join(os.path.dirname(image_path), "_runtime")
            os.makedirs(temp_dir, exist_ok=True)
            temp_path = os.path.join(temp_dir, f"resized_{int(time.time())}.png")
            img.save(temp_path, format='PNG')

            return temp_path

        except Exception as e:
            logger.warning(f"G√∂r√ºnt√º yeniden boyutlandƒ±rma hatasƒ±: {e}")
            return image_path

    def _get_extraction_prompt(self):
        """Detaylƒ± extraction prompt - y√ºksek doƒüruluk i√ßin optimize edilmi≈ü"""
        return (
            "TASK: Extract ALL textual content from the image completely and accurately.\n\n"
            "RULES:\n"
            "1. Extract ONLY the text visible in the image.\n"
            "2. Do NOT add explanations, comments, or extra information.\n"
            "3. Leave empty areas EMPTY (no guessing, no filling).\n"
            "4. Preserve Turkish characters (√ß, ƒü, ƒ±, √∂, ≈ü, √º, √á, ƒû, ƒ∞, √ñ, ≈û, √ú).\n\n"
            "TABLE FORMATTING:\n"
            "- Separate cells in the same row with TAB (\\t).\n"
            "- End each row with NEWLINE (\\n).\n"
            "- Keep empty cells empty.\n"
            "- Maintain cell order left to right, top to bottom.\n\n"
            "SPECIAL CASES:\n"
            "- Read text on colored backgrounds.\n"
            "- Read vertical/rotated text.\n"
            "- Form fields:\n"
            "  * Filled field ‚Üí write its content.\n"
            "  * Empty field ‚Üí leave blank.\n"
            "  * Checkbox ‚Üí ‚ñ° (empty) or ‚òë (checked).\n"
            "- Preserve numeric values exactly (including dots, commas).\n"
            "- Preserve date formats as written (e.g., ____/__/____).\n\n"
            "OUTPUT:\n"
            "- Plain text only.\n"
            "- Preserve original layout.\n"
            "- No intro or outro text.\n"
            "- No code blocks.\n\n"
            "PRIORITY:\n"
            "1. Accuracy (only 100% certain text).\n"
            "2. Completeness (all readable text).\n"
            "3. Format preservation (tables/forms).\n\n"
            "Uncertain character ‚Üí [?]\n"
            "Unreadable section ‚Üí [...]"
        )

    def extract_text(self, image_path, custom_prompt=None):
        """
        G√∂r√ºnt√ºden metin √ßƒ±kar

        Args:
            image_path (str): G√∂r√ºnt√º dosya yolu
            custom_prompt (str): √ñzel prompt (varsa)

        Returns:
            dict: √áƒ±karƒ±m sonucu
        """
        try:
            if not self.is_initialized:
                if not self.initialize_model():
                    return {
                        'success': False,
                        'error': 'Model ba≈ülatƒ±lamadƒ±',
                        'text': ''
                    }

            # G√∂r√ºnt√º kontrol√º
            if not os.path.exists(image_path):
                return {
                    'success': False,
                    'error': f'G√∂r√ºnt√º bulunamadƒ±: {image_path}',
                    'text': ''
                }

            logger.info(f"üì∑ G√∂r√ºnt√º y√ºkleniyor: {os.path.basename(image_path)}")

            # G√∂r√ºnt√º y√ºkleme kontrol√º
            _ = Image.open(image_path)

            # Hƒ±z optimizasyonlarƒ±
            if torch.cuda.is_available():
                torch.set_float32_matmul_precision('high')
                try:
                    torch.backends.cuda.matmul.allow_tf32 = True
                except:
                    pass

            # G√∂r√ºnt√ºy√º yeniden boyutlandƒ±r
            resized_path = self._resize_image(image_path, long_edge_max=1600)

            # Prompt olu≈ütur
            prompt = custom_prompt or self._get_extraction_prompt()

            logger.info("üîç OCR i≈ülemi ba≈ülatƒ±lƒ±yor...")

            start_time = time.time()

            with torch.inference_mode():
                try:
                    # GOT-OCR2 i√ßin basit metin √ßƒ±karƒ±mƒ±
                    result = self.model.chat(
                        self.tokenizer,
                        resized_path,
                        question=prompt
                    )
                except TypeError:
                    try:
                        result = self.model.chat(
                            self.tokenizer,
                            resized_path,
                            question=prompt
                        )
                    except TypeError:
                        # Son √ßare: prompt'suz
                        result = self.model.chat(
                            self.tokenizer,
                            resized_path,
                            ocr_type='ocr'
                        )

            processing_time = time.time() - start_time

            # Ge√ßici dosyayƒ± temizle
            if resized_path != image_path and os.path.exists(resized_path):
                try:
                    os.unlink(resized_path)
                    # _runtime klas√∂r√ºn√º de temizle
                    runtime_dir = os.path.dirname(resized_path)
                    if os.path.exists(runtime_dir) and not os.listdir(runtime_dir):
                        os.rmdir(runtime_dir)
                except:
                    pass

            logger.info(".2f")

            return {
                'success': True,
                'text': result,
                'processing_time': processing_time,
                'model': 'GOT-OCR2',
                'device': self.device
            }

        except Exception as e:
            logger.error(f"‚ùå OCR hatasƒ±: {e}")
            return {
                'success': False,
                'error': str(e),
                'text': ''
            }

def main():
    """Komut satƒ±rƒ± aray√ºz√º"""
    parser = argparse.ArgumentParser(
        description='DOT-OCR (GOT-OCR2) Komut Satƒ±rƒ± Uygulamasƒ±',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Kullanƒ±m √∂rnekleri:
  python dotOCR.py 1.png                    # temp/1.png dosyasƒ±nƒ± i≈üle
  python dotOCR.py 2.PNG --output result.txt    # √áƒ±ktƒ±yƒ± dosyaya kaydet
  python dotOCR.py temp/image.jpg --custom-prompt "√ñzel promptunuz"

Not: Sadece dosya adƒ± yazarsanƒ±z (√∂rn: 1.png) otomatik olarak temp/ klas√∂r√ºnden aranƒ±r.
     Tek kapsamlƒ± prompt kullanƒ±lƒ±r - RAG sistemi i√ßin optimize edilmi≈ütir.
        """
    )

    parser.add_argument('image_path', help='ƒ∞≈ülenecek g√∂r√ºnt√º dosyasƒ±')
    parser.add_argument('--model-path', default=r"C:\Users\samet\Downloads\GOT-OCR2_0",
                       help='GOT-OCR2 model dizini yolu')
    parser.add_argument('--custom-prompt', help='√ñzel prompt')
    parser.add_argument('--output', '-o', help='√áƒ±ktƒ± dosyasƒ±')
    parser.add_argument('--quiet', '-q', action='store_true', help='Sadece sonucu g√∂ster')

    args = parser.parse_args()

    # Dosya yolunu ayarla - eƒüer sadece dosya adƒ± verilmi≈üse temp klas√∂r√ºnden ara
    if not os.path.exists(args.image_path):
        # Eƒüer sadece dosya adƒ± verilmi≈üse (path ayƒ±rƒ±cƒ± i√ßermiyorsa) temp klas√∂r√ºnden ara
        if os.sep not in args.image_path and '/' not in args.image_path:
            temp_path = os.path.join('temp', args.image_path)
            if os.path.exists(temp_path):
                args.image_path = temp_path
            else:
                print(f"‚ùå Hata: '{args.image_path}' dosyasƒ± bulunamadƒ±")
                print(f"   Temp klas√∂r√ºnden arandƒ±: {temp_path}")
                return 1
        else:
            print(f"‚ùå Hata: '{args.image_path}' dosyasƒ± bulunamadƒ±")
            return 1

    # Servis ba≈ülat
    if not args.quiet:
        print("üöÄ DOT-OCR ba≈ülatƒ±lƒ±yor...")
        print(f"üìÇ G√∂r√ºnt√º: {args.image_path}")
        print(f"ü§ñ Model: {args.model_path}")
        print("-" * 50)

    ocr = DOTOCR(args.model_path)

    # OCR i≈üle
    result = ocr.extract_text(
        args.image_path,
        args.custom_prompt
    )

    # Sonu√ß g√∂ster/g√∂nder
    if args.output:
        if args.output.endswith('.json'):
            with open(args.output, 'w', encoding='utf-8') as f:
                json.dump(result, f, ensure_ascii=False, indent=2)
        else:
            # Text dosyasƒ±
            with open(args.output, 'w', encoding='utf-8') as f:
                f.write(result.get('text', ''))

        if not args.quiet:
            print(f"üíæ Sonu√ß {args.output} dosyasƒ±na kaydedildi")
    else:
        if result['success']:
            if not args.quiet:
                print("‚úÖ OCR Ba≈üarƒ±lƒ±!")
                print(f"‚è±Ô∏è  S√ºre: {result.get('processing_time', 0):.2f}s")
                print("-" * 50)
            print(result['text'])
        else:
            print(f"‚ùå Hata: {result.get('error', 'Bilinmeyen hata')}")
            return 1

    return 0

if __name__ == "__main__":
    exit(main())
