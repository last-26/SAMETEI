/**
 * Geli≈ümi≈ü G√∂r√ºnt√º √ñn ƒ∞≈üleme
 * DOT-OCR i√ßin g√∂r√ºnt√º optimizasyonu
 */

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

class ImagePreprocessor {
  constructor() {
    this.pythonPath = 'python';
    this.tempDir = path.join(__dirname, '..', 'temp');
  }

  /**
   * G√∂r√ºnt√ºy√º analiz et ve √ßok basit √∂n i≈üleme uygula
   */
  async preprocessImage(imagePath, options = {}) {
    try {
      console.log(`üîç Basit g√∂r√ºnt√º √∂n i≈üleme ba≈ülatƒ±lƒ±yor: ${path.basename(imagePath)}`);

      const {
        enhanceContrast = true,  // Sadece bunu tut
        removeBackground = false, // Devre dƒ±≈üƒ±
        detectRotation = false,   // Devre dƒ±≈üƒ±
        denoise = false,          // Devre dƒ±≈üƒ±
        optimizeForOCR = false    // Devre dƒ±≈üƒ±
      } = options;

      let processedPath = imagePath;

      // Sadece √ßok basit kontrast geli≈ütirme (grayscale)
      if (enhanceContrast) {
        console.log('üé® Basit grayscale d√∂n√º≈ü√ºm√º uygulanƒ±yor...');
        processedPath = await this.enhanceContrast(processedPath);
      }

      // Diƒüer i≈ülemler tamamen kaldƒ±rƒ±ldƒ± - √ßok agresifti

      console.log(`‚úÖ Basit √∂n i≈üleme tamamlandƒ±: ${path.basename(processedPath)}`);
      return processedPath;

    } catch (error) {
      console.error(`‚ùå √ñn i≈üleme hatasƒ±: ${error.message}`);
      console.log('‚ö†Ô∏è Orijinal g√∂r√ºnt√º kullanƒ±lacak');
      return imagePath; // Hata durumunda orijinal g√∂r√ºnt√ºy√º d√∂nd√ºr
    }
  }

  /**
   * Kontrast geli≈ütirme
   */
  async enhanceContrast(imagePath) {
    return this.runPythonScript('enhance_contrast.py', imagePath);
  }

  /**
   * Arka plan temizleme
   */
  async removeBackground(imagePath) {
    return this.runPythonScript('remove_background.py', imagePath);
  }

  /**
   * D√∂nd√ºrme tespiti ve d√ºzeltme
   */
  async detectAndCorrectRotation(imagePath) {
    return this.runPythonScript('correct_rotation.py', imagePath);
  }

  /**
   * G√ºr√ºlt√º azaltma
   */
  async denoise(imagePath) {
    return this.runPythonScript('denoise.py', imagePath);
  }

  /**
   * OCR i√ßin optimizasyon
   */
  async optimizeForOCR(imagePath) {
    return this.runPythonScript('optimize_ocr.py', imagePath);
  }

  /**
   * Python script √ßalƒ±≈ütƒ±rma yardƒ±mcƒ± fonksiyonu
   */
  async runPythonScript(scriptName, imagePath) {
    return new Promise((resolve, reject) => {
      const scriptPath = path.join(__dirname, '..', 'scripts', 'preprocessing', scriptName);

      if (!fs.existsSync(scriptPath)) {
        console.warn(`‚ö†Ô∏è Script bulunamadƒ±: ${scriptName}, atlanƒ±yor`);
        resolve(imagePath);
        return;
      }

      const outputPath = path.join(this.tempDir, `preprocessed_${Date.now()}_${path.basename(imagePath)}`);

      const python = spawn(this.pythonPath, [scriptPath, imagePath, outputPath]);

      python.on('close', (code) => {
        if (code === 0 && fs.existsSync(outputPath)) {
          resolve(outputPath);
        } else {
          console.warn(`‚ö†Ô∏è ${scriptName} ba≈üarƒ±sƒ±z, orijinal g√∂r√ºnt√º kullanƒ±lƒ±yor`);
          resolve(imagePath);
        }
      });

      python.on('error', (error) => {
        console.warn(`‚ö†Ô∏è ${scriptName} hatasƒ±: ${error.message}`);
        resolve(imagePath);
      });
    });
  }

  /**
   * G√∂r√ºnt√º √∂zelliklerini analiz et
   */
  async analyzeImage(imagePath) {
    try {
      const analysis = await this.runPythonScript('analyze_image.py', imagePath);

      // Basit analiz (dosya boyutu, format vb.)
      const stats = fs.statSync(imagePath);
      const fileSizeKB = Math.round(stats.size / 1024);

      return {
        fileSize: fileSizeKB,
        format: path.extname(imagePath).toLowerCase(),
        hasColorBackground: this.detectColorBackground(imagePath),
        hasVerticalText: this.detectVerticalText(imagePath),
        needsPreprocessing: fileSizeKB > 500 // 500KB √ºzeri g√∂r√ºnt√ºler i√ßin
      };
    } catch (error) {
      return {
        fileSize: 0,
        format: 'unknown',
        hasColorBackground: false,
        hasVerticalText: false,
        needsPreprocessing: false
      };
    }
  }

  /**
   * Renkli arka plan tespiti (basit yakla≈üƒ±m)
   */
  detectColorBackground(imagePath) {
    // Dosya adƒ±na g√∂re basit tespit
    const fileName = path.basename(imagePath).toLowerCase();
    return fileName.includes('color') || fileName.includes('form') || fileName.includes('table');
  }

  /**
   * Dikey metin tespiti (basit yakla≈üƒ±m)
   */
  detectVerticalText(imagePath) {
    // Dosya adƒ±na g√∂re basit tespit
    const fileName = path.basename(imagePath).toLowerCase();
    return fileName.includes('vertical') || fileName.includes('rotate');
  }
}

module.exports = ImagePreprocessor;
